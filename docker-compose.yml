services:
  # Application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: amp-report-app
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3000}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-amp_report}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_SSL: ${DB_SSL:-false}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret}
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY:-your_google_key}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your_openai_key}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3001}
    ports:
      - "${PORT:-3000}:${PORT:-3000}"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src
      - ./package.json:/app/package.json
      - ./tsconfig.json:/app/tsconfig.json
      - /app/node_modules
    command: npm start
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - amp-network

  # PostgreSQL database (for local development)
  postgres:
    image: postgres:15-alpine
    container_name: amp-report-postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-amp_report}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - amp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin for database management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: amp-report-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@ampreport.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - amp-network
    profiles:
      - tools

  # Nginx reverse proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: amp-report-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - amp-network
    profiles:
      - production

  # Docusaurus documentation site
  docs:
    image: node:18-alpine
    container_name: amp-report-docs
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      HOST: 0.0.0.0
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    volumes:
      - ./:/app
    working_dir: /app/docs
    command: sh -c "npm install && npm run start -- --port 3000 --host 0.0.0.0"
    ports:
      - "3002:3000"
    networks:
      - amp-network
    profiles:
      - docs

networks:
  amp-network:
    driver: bridge

volumes:
  postgres_data:
  node_modules: