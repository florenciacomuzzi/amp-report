services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: amp-report-app-dev
    env_file:
      - .env.dev
    ports:
      - "3000:3000"
    volumes:
      - ./backend/src:/app/backend/src
      - ./backend/nodemon.json:/app/backend/nodemon.json
    command: npm run dev
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  slides:
    image: node:20-alpine
    container_name: amp-report-slides-dev
    working_dir: /app
    volumes:
      - .:/app
    command: npx reveal-md slides/mvp.md --watch --port 1948
    ports:
      - "1948:1948"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: amp-report-client-dev
    env_file:
      - .env
    environment:
      - REACT_APP_API_URL=http://localhost:3000
      - PORT=3001
      - WATCHPACK_POLLING=true
      - WDS_SOCKET_HOST=localhost
      - WDS_SOCKET_PORT=3001
    volumes:
      - ./client/src:/app/src
      - ./client/public:/app/public
    ports:
      - "3001:3001"
    depends_on:
      - app
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  # Test the Cloud Run backend container
  backend-cloud-run:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: amp-report-backend-cloud-run
    environment:
      - PORT=3002
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=amp_report
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=test-secret
    ports:
      - "3002:3002"
    depends_on:
      - postgres
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  # PostgreSQL database (for local development)
  postgres:
    image: postgres:15-alpine
    container_name: amp-report-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: amp_report
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:

